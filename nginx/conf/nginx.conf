worker_processes 1;
events {
  worker_connections  1024;
}

# needed so nginx will load the following env variables
env JWT_SECRET;
env REDIS_HOST;
env REDIS_PORT;

http {
  lua_package_path "/opt/openresty/nginx/scripts/?.lua;;";
  resolver 127.0.0.11 ipv6=off;

  server {
      listen *:8080;
      location ~* ^/secure$ {
        add_header Content-Type text/plain;
        return 200 'Hello! you have been authorized!\n';
      }

      location ~* ^/say$ {
        add_header Content-Type text/plain;
        if ($arg_name = '') {
          return 200 'A girl has no name.\n';
        }
        return 200 'Hello $arg_name!\n';
      }
  }

  server {
    listen *:80;
    server_name ~^auth.(?<domain>.*)$;
    location = /oauth2/callback {
      proxy_pass http://oauth2_proxy;
    }

    # in the /oauth2/start we add the subdomain to the rd parameter
    # than, oauth2_proxy adds this part to the end of the url like so:
    # auth.example.com/<domain>/a/lot/of/parameters

    # this locations rewrites the above url to look like so:
    # <domain>.example.com/a/lot/of/parameters

    # if the <domain> part is an underscore:
    # auth.example.com/_/a/lot/of/parameters
    # we ignore it and rewrite to:
    # example.com/a/lot/of/parameters
    location ~/_(?<remaining_uri>.*)$ {
      rewrite ^ $scheme://$domain$remaining_uri;
    }

    location ~/(?<sub>[^/]+)(?<remaining_uri>.*)$ {
      rewrite ^ $scheme://$sub.$domain$remaining_uri;
    }
  }

  upstream oauth2_proxy {
    least_conn;
    server oauth2_proxy:4180;
  }

  server {
      server_name ~^(?<domain>.+)\.example.*;

      # if no domain exists, treat the domain as '_'
      if ($domain = '') {
        set $domain "_";
      }

      listen *:80 default_server;
      error_page 555 = @auth__jwt;
      error_page 556 = @auth__basic;

      # redirect to a location that handles JWT tokens
      if ($http_authorization ~* "^Bearer") {
        return 555;
      }

      # redirect to a locations that handles Basic Authentication
      if ($http_authorization ~* "^Basic") {
        return 556;
      }

      # perform JWT authentication
      location @auth__jwt {
        access_by_lua_block {
          local route = require("route")
          -- the subdomain is used as the service identifier
          route.authorize(ngx.var.domain)
        }
        proxy_pass http://127.0.0.1:8080;
      }

      # default basic auth
      location @auth__basic {
        auth_basic "Restricted";
        auth_basic_user_file /opt/openresty/nginx/conf/.htpasswd;
        proxy_pass http://127.0.0.1:8080;
      }
      # rewrite the 'rd' parameter to include the domain of the request
      # if there's no domain, we insert an underscore, and remove it later on
      location /oauth2/start {
        proxy_pass http://oauth2_proxy/oauth2/start?rd=%2F$domain$arg_rd;
      }

      location / {
        proxy_pass http://oauth2_proxy;
      }
    }
}
